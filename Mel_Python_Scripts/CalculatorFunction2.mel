global proc float sum(float $numbers[]) 
{
    float $result = 0;
    for ($num in $numbers) {
        $result += $num;
    }
    return $result;
}


global proc float difference(float $numbers[]) 
{
    int $numCount = size($numbers);
    if ($numCount < 2) {
        error "Subtraction requires at least 2 numbers.";
    }
    float $result = $numbers[0];
    for ($i = 1; $i < $numCount; $i++) {
        $result -= $numbers[$i];
    }
    return $result;
}


global proc float multiplication(float $numbers[]) 
{
    float $result = 1;
    for ($num in $numbers) {
        $result *= $num;
    }
    return $result;
}

global proc float division(float $numbers[]) 
{
    int $numCount = size($numbers);
    if ($numCount < 2) {
        error "Division requires at least 2 numbers.";
    }
    float $result = $numbers[0];
    for ($i = 1; $i < $numCount; $i++) {
        if ($numbers[$i] == 0) {
            error "Division by zero is not allowed.";
        }
        $result /= $numbers[$i];
    }
    return $result;
}

global proc float power(float $base, int $exponent) 
{
    float $result = 1;
    for ($i = 0; $i < $exponent; $i++) {
        $result *= $base;
    }
    return $result;
}

global proc float mean(float $numbers[]) 
{
    int $numCount = size($numbers);
    if ($numCount == 0) {
        error "Mean calculation requires at least 1 number.";
    }
    float $sum = sum($numbers);
    return $sum / float($numCount);
}

global proc float median(float $numbers[]) 
{
    int $numCount = size($numbers);
    if ($numCount == 0) {
        error "Median calculation requires at least 1 number.";
    }
    
    float $sortedNumbers[];
    for ($num in $numbers) {
        $sortedNumbers[size($sortedNumbers)] = $num;
    }
    
    for ($i = 0; $i < $numCount; $i++) {
        for ($j = $i + 1; $j < $numCount; $j++) {
            if ($sortedNumbers[$i] > $sortedNumbers[$j]) {
                float $temp = $sortedNumbers[$i];
                $sortedNumbers[$i] = $sortedNumbers[$j];
                $sortedNumbers[$j] = $temp;
            }
        }
    }
    
    if ($numCount % 2 == 1) {
        return $sortedNumbers[$numCount / 2];
    } else {
        int $mid = $numCount / 2;
        return ($sortedNumbers[$mid - 1] + $sortedNumbers[$mid]) / 2;
    }
}

global proc float calculator(float $input[], int $operation) 
{
    float $result = 0;
    string $operationName = "";

    if ($operation == 1) {
        $result = sum($input);
        $operationName = "Sum";
    } else if ($operation == 2) {
        $result = difference($input);
        $operationName = "Difference";
    } else if ($operation == 3) {
        $result = multiplication($input);
        $operationName = "Multiplication";
    } else if ($operation == 4) {
        $result = division($input);
        $operationName = "Division";
    } else if ($operation == 5) {
        if (size($input) != 2) {
            error "Power operation requires exactly 2 numbers.";
        }
        $result = power($input[0], int($input[1]));
        $operationName = "Power";
    } else if ($operation == 6) {
        $result = mean($input);
        $operationName = "Mean";
    } else if ($operation == 7) {
        $result = median($input);
        $operationName = "Median";
    } else {
        error "Invalid operation code.";
    }

    string $inputStr = "";
    for ($num in $input) {
        $inputStr += ($num + " + ");
    }
    $inputStr = substring($inputStr, 0, size($inputStr) - 3);
    
    string $resultStr = $operationName + " of " + $inputStr + " = " + $result;
    print($resultStr);
    
    return $result;
}


float $input[] = {7.0, 2.0, 9.0};
int $operation = 4;
calculator($input, $operation);


